ls
library(swirl)
swirl()
?str
md <- read.table(file="movies.txt", sep=",", header=TRUE)
ls
md <- read.table(file="movies.txt", sep=",", header=TRUE)
pwd
pwd()
ls()
# To get more information on any specific named function, type "?" followed by the function name
?read.table
md
pwd()
# for example:
setwd("/home/jernej/Desktop/Repositories/classes/third-year/intelligent-systems-class/labs/1/R_introduction")
# To read data from a text file, use the "read.table" command.
# The parameter header=TRUE indicates that the file to be read includes a first line with the column names
md <- read.table(file="movies.txt", sep=",", header=TRUE)
# To get more information on any specific named function, type "?" followed by the function name
?read.table
md
head(md)
clc
ls
md <- read.table(file="movies.txt", sep=",", header=TRUE)
md <- read.table(file="movies.txt", sep=",", header=TRUE)
md <- read.table(file="movies.txt", sep=",", header=TRUE)
md <- read.table(file="movies.txt", sep=",", header=TRUE)
md <- read.table(file="movies.txt", sep=",", header=TRUE)
md <- read.table(file="movies.txt", sep=",", header=TRUE)
md <- read.table(file="movies.txt", sep=",", header=TRUE)
setwd("/home/jernej/Desktop/Repositories/classes/third-year/intelligent-systems-class/labs/1/R_introduction")
setwd("/home/jernej/Desktop/Repositories/classes/third-year/intelligent-systems-class/labs/1/R_introduction")
setwd("/home/jernej/Desktop/Repositories/classes/third-year/intelligent-systems-class/labs/1/R_introduction")
setwd("/home/jernej/Desktop/Repositories/classes/third-year/intelligent-systems-class/labs/1/R_introduction")
# To read data from a text file, use the "read.table" command.
# The parameter header=TRUE indicates that the file to be read includes a first line with the column names
md <- read.table(file="movies.txt", sep=",", header=TRUE)
# To get more information on any specific named function, type "?" followed by the function name
?read.table
# Useful functions
head(md) 			# Return the first part of the table.
tail(md)			# Return the last part of the table.
summary(md) 		# 'summary' is a generic function used to producte result summaries of the results of various model fitting functions.
str(md) 			# Compactly display the internal structure of an R object.
names(md) 			# Get column names.
# We will transform binary attributes into nominal variables with a fixed number of possible values (factors)
md$Action <- as.factor(md$Action) 					# Possible values are 0 and 1 (levels: 0 1)
md$Animation <- as.factor(md$Animation)
# The remaining columns will be transformed using the for loop (Alternative way of doing the same thing)
for (i in 20:24)
md[,i] <- as.factor(md[,i])
# Binary attributes are now represented as factors
summary(md)
# Accessing data frame elements...
md[30,]
md[30,3]
md[30,"length"]
md[,3]
md$length
# Useful data visualization functions
plot(md$length)
hist(md$length) 			# md$length returns a vector containing all the movie lengths.
plot(density(md$length)) 	# Plot estimated PDF.
boxplot(md$length) 			# Make box plot.
barplot(table(md$Drama)) 	# Plot number of dramas against other genres.
pie(table(md$mpaa)) 		# make a pie graph of the Motion Picture Association of America's ratings
# the table() command gives the frequency of values in the vector
table(md$Comedy)
# the proportion of comedies can be plotted
barplot(table(md$Comedy))
pie(table(md$Comedy))
#  it is important to always label graphs ...
tab <- table(md$Comedy)
names(tab) <- c("Other genres", "Comedies")
tab
sum(tab)
barplot(tab, ylab="Number of titles", main="Proportion of comedies to other genres")
barplot(tab / sum(tab) * 100, ylab="Percentage of titles", main="The proportion of comedies to other genres")
pie(tab, main = "Proportion of comedies to other genres")
# Plot the rating distribution for comedies
# Select rows representing comedies and select the "rating" column
hist(md[md$Comedy == "1", "rating"], xlab="Rating", ylab="Frequency", main="Histogram of ratings for comedies")
# Box plots provide a visual display of the range and potential skewness of the data
boxplot(md[md$Comedy == "1", "rating"], ylab="Rating", main="Boxplot of ratings for comedies")
# Find quantiles of the comedies' ratings
quantile(md$rating[md$Comedy == 1])
# Find quantiles of the comedies' ratings
quantile(md$rating[md$Comedy == 1])
# Find quantiles of the comedies' ratings
quantile(md$rating[md$Comedy == 1])
# Find quantiles of the comedies' ratings
quantile(md$rating[md$Comedy == 1])
# Select comedies
comedy <- md$Comedy == "1"
# Calculate the mean rating value for comedies and non-comedies
mean(md[comedy,"rating"]) 		# Compute mean of ratings of comedies.
mean(md[!comedy,"rating"]) 		# Compute mean of ratings of non-comedies.
# Side-by-side boxplots of ratings grouped by values of the attribute "Comedy"
boxplot(rating ~ Comedy, data=md)
boxplot(rating ~ Comedy, data=md, names=c("Other genres", "Comedies"), ylab="Rating", main="Comparison of ratings between comedies and non-comedies")
# Selection mask (year greater or equal to 1990)
sel <- md$year >= 1990
# the table() command can be used to get a two-way contigency table
table(md$Comedy[sel], md$year[sel]) # MARK
# Make a vector of years column where year is greater or equal to 1990.
table(md$year[sel])
tabcomedy <- table(md$Comedy[sel], md$year[sel])
tabyear <- table(md$year[sel]) # Mark
tabcomedy[2,]/tabyear
ratio <- tabcomedy[2,]/tabyear
barplot(ratio, xlab="Year", ylab="Relative frequency", main="Proportion of comedies")
plot(x=names(ratio), y=as.vector(ratio), type="l", xlab="Year", ylab="Relative frequency", main="Proportion of comedies, 1990-2005")
# the average rating
mean(md$rating)
# how many movies are above the average rating?
tab <- table(md$rating > mean(md$rating))
tab
f <- function(x)
{
y <- (0.46 * (dnorm(x, -1, 2/3) + dnorm(x, 1, 2/3)) +
(1/300) * (dnorm(x, -0.5, 0.01) + dnorm(x, -1, 0.01) +
dnorm(x, -1.5, 0.01)) +
(7/300) * (dnorm(x, 0.5, 0.07) + dnorm(x, 1, 0.07) +
dnorm(x, 1.5, 0.07)))
y
}
library(GA)
f <- function(x)
{
y <- (0.46 * (dnorm(x, -1, 2/3) + dnorm(x, 1, 2/3)) +
(1/300) * (dnorm(x, -0.5, 0.01) + dnorm(x, -1, 0.01) +
dnorm(x, -1.5, 0.01)) +
(7/300) * (dnorm(x, 0.5, 0.07) + dnorm(x, 1, 0.07) +
dnorm(x, 1.5, 0.07)))
y
}
# Plot the double claw
curve(f, from = -3, to = 3, n = 1000)
# For the maximization of this function we may use f directly as the fitness function
GA <- ga(type = "real-valued", fitness = f, min = -3, max = 3)
library(GA)
f <- function(x)
{
y <- (0.46 * (dnorm(x, -1, 2/3) + dnorm(x, 1, 2/3)) +
(1/300) * (dnorm(x, -0.5, 0.01) + dnorm(x, -1, 0.01) +
dnorm(x, -1.5, 0.01)) +
(7/300) * (dnorm(x, 0.5, 0.07) + dnorm(x, 1, 0.07) +
dnorm(x, 1.5, 0.07)))
y
}
# Plot the double claw
curve(f, from = -3, to = 3, n = 1000)
# For the maximization of this function we may use f directly as the fitness function
GA <- ga(type = "real-valued", fitness = f, lower = -3, upper = 3) # Type of genevector, fitness function, lower bound, upper bound.
# The object returned can be plotted
plot(GA)
points(GA@solution, f(GA@solution), col="red") # Mark maximum on plot.
Sys.sleep(10)
# The evolution of the population units and the corresponding functions values at each
# generation can be obtained by defining a new monitor function and then passing this
# function as an optional argument to ga
myMonitor <- function(obj)
{
curve(f, obj@lower, obj@upper, n = 1000, main = paste("iteration =", obj@iter)) 	# Plot curve.
points(obj@population, obj@fitness, pch = 20, col = 2) 								# pch refers to the symbol used to mark the points.
rug(obj@population, col = 2) 														# Plot agent values on x axis.
Sys.sleep(1) 																		# Wait before starting next iteration.
}
# GA <- ga(type = "real-valued", fitness = f, lower = -3, upper = 3, monitor = myMonitor)
# GA <- ga(type = "real-valued", fitness = f, lower = -3, upper = 3, monitor = myMonitor)
# GA <- ga(type = "real-valued", fitness = f, lower = -3, upper = 3, monitor = myMonitor)
GA <- ga(type = "real-valued", fitness = f, lower = -3, upper = 3, monitor = myMonitor)
library(GA)
# The age at which the tree was measured
Age <- c(2.44, 12.44, 22.44, 32.44, 42.44, 52.44, 62.44, 72.44, 82.44, 92.44, 102.44, 112.44)
# The bole volume of the tree
Vol <- c(2.2, 20.0, 93.0, 262.0, 476.0, 705.0, 967.0, 1203.0, 1409.0, 1659.0, 1898.0, 2106.0)
# Plot age vs vol.
plot(Age, Vol)
# We first define our model function (argument params represents a vector of the parameters a, b, and c)
model <- function(params)
{
params[1] * (1 - exp(-params[2] * Age))^params[3]
}
# We define the fitness function as the sum of squares of the differences between estimated and observed data
myFitness2 <- function(params)
{
-sum((Vol - model(params))^2)
}
# real valued gene vector, fitness function, lower bound for parameters, upper bound for parameters, population size, crossover mutation, maximum number of iterations,
# run ~ the number of consecutive generations without any improvement in the best fitness value before the GA is stopped, names of parameters.
# (a vector of character strings providing the names of decision variables).
GA2 <- ga(type = "real-valued", fitness = myFitness2, lower = c(1000, 0, 0), upper = c(5000, 5, 5),
popSize = 500, crossover = gareal_blxCrossover, maxiter = 5000, run = 200, names = c("a", "b", "c"))
# Let's plot our solution.
plot(Age, Vol) 					# Plot measured data.
lines(Age, model(GA2@solution)) # Plot model with optained parameters.
library(GA)
# The age at which the tree was measured
Age <- c(2.44, 12.44, 22.44, 32.44, 42.44, 52.44, 62.44, 72.44, 82.44, 92.44, 102.44, 112.44)
# The bole volume of the tree
Vol <- c(2.2, 20.0, 93.0, 262.0, 476.0, 705.0, 967.0, 1203.0, 1409.0, 1659.0, 1898.0, 2106.0)
library(GA)
GA2 <- ga(type = "real-valued", fitness = myFitness2, lower = c(1000, 0, 0), upper = c(5000, 5, 5),
popSize = 500, crossover = gareal_blxCrossover, maxiter = 5000, run = 200, names = c("a", "b", "c"), monitor=myMonitor2)
library(GA)
# The age at which the tree was measured
Age <- c(2.44, 12.44, 22.44, 32.44, 42.44, 52.44, 62.44, 72.44, 82.44, 92.44, 102.44, 112.44)
# The bole volume of the tree
Vol <- c(2.2, 20.0, 93.0, 262.0, 476.0, 705.0, 967.0, 1203.0, 1409.0, 1659.0, 1898.0, 2106.0)
# Plot age vs vol.
plot(Age, Vol)
# We first define our model function (argument params represents a vector of the parameters a, b, and c)
model <- function(params)
{
params[1] * (1 - exp(-params[2] * Age))^params[3]
}
# We define the fitness function as the sum of squares of the differences between estimated and observed data
myFitness2 <- function(params)
{
-sum((Vol - model(params))^2)
}
# real valued gene vector, fitness function, lower bound for parameters, upper bound for parameters, population size, crossover mutation, maximum number of iterations,
# run ~ the number of consecutive generations without any improvement in the best fitness value before the GA is stopped, names of parameters.
# (a vector of character strings providing the names of decision variables).
GA2 <- ga(type = "real-valued", fitness = myFitness2, lower = c(1000, 0, 0), upper = c(5000, 5, 5),
popSize = 500, crossover = gareal_blxCrossover, maxiter = 5000, run = 200, names = c("a", "b", "c"))
# Let's plot our solution.
plot(Age, Vol) 					# Plot measured data.
lines(Age, model(GA2@solution)) # Plot model with optained parameters.
Sys.sleep(5)
# we can use a monitor function to plot the current solution -> visualize the algorithm
myMonitor2 <- function(obj)
{
i <- which.max(obj@fitness)
plot(Age, Vol)
lines(Age, model(obj@population[i,]), col="red")
title(paste("iteration =", obj@iter), font.main = 1)
Sys.sleep(1)
}
GA2 <- ga(type = "real-valued", fitness = myFitness2, lower = c(1000, 0, 0), upper = c(5000, 5, 5),
popSize = 500, crossover = gareal_blxCrossover, maxiter = 5000, run = 200, names = c("a", "b", "c"), monitor=myMonitor2)
# the knapsack capacity
Capacity <- 10
# A binary GA can be used to solve the knapsack problem. The solution to this problem is a binary string equal to the number
# of items where the ith bit is 1 if the ith item is in the subset and 0 otherwise. The fitness function should penalize
# unfeasible solutions.
knapsack <- function(x)
{
f <- sum(x * values) 	# sum of values at places where there is a 1 in vector x
w <- sum(x * weights) 	# same for weights
if (w > Capacity) 		# If weight exceeds capacity...
f <- Capacity - w 	# Penalize solution.
return (f)
}
# Run genetic algorithm with a binary vector as a gene, knapstack value as fitness function, maximum of 1000 generations
# yielding when the best result does not change for 200 iterations.
GA3 <- ga(type = "binary", fitness = knapsack, nBits = length(weights), maxiter = 1000, run = 200, popSize = 100)
# Results summary.
summary(GA3)
# Extract solution value and weight.
sol <- as.vector(GA3@solution)
sol_value_idx <- which(sol == 1, sol)
sol_weight_idx <- which(sol == 1, sol)
sol_value <- sum(values[sol_value_idx])
sol_weight <- sum(weights[sol_weight_idx])
library(GA)
# The Knapsack problem is defined as follows: given a set of items, each with a mass and a value, determine the subset
# of items to be included in a collection so that the total weight is less than or equal to a given limit and the total value
# is as large as possible.
# a vector of the items' values
values <- c(5, 8, 3, 4, 6, 5, 4, 3, 2)
# a vector of the item's weights
weights <- c(1, 3, 2, 4, 2, 1, 3, 4, 5)
# the knapsack capacity
Capacity <- 10
# A binary GA can be used to solve the knapsack problem. The solution to this problem is a binary string equal to the number
# of items where the ith bit is 1 if the ith item is in the subset and 0 otherwise. The fitness function should penalize
# unfeasible solutions.
knapsack <- function(x)
{
f <- sum(x * values) 	# sum of values at places where there is a 1 in vector x
w <- sum(x * weights) 	# same for weights
if (w > Capacity) 		# If weight exceeds capacity...
f <- Capacity - w 	# Penalize solution.
return (f)
}
# Run genetic algorithm with a binary vector as a gene, knapstack value as fitness function, maximum of 1000 generations
# yielding when the best result does not change for 200 iterations.
GA3 <- ga(type = "binary", fitness = knapsack, nBits = length(weights), maxiter = 1000, run = 200, popSize = 100)
# Results summary.
summary(GA3)
# Extract solution value and weight.
sol <- as.vector(GA3@solution)
sol_value_idx <- which(sol == 1, sol)
sol_weight_idx <- which(sol == 1, sol)
sol_value <- sum(values[sol_value_idx])
sol_weight <- sum(weights[sol_weight_idx])
sol_weight
sol_value
md
library(GA)
data("eurodist", package = "datasets")
D <- as.matrix(eurodist)
D
D
}
# The fitness function to be maximized is defined as the reciprocal of the tour length.
tspFitness <- function(tour)
{
1/tour_length(tour)
}
# Run genetic algorithm.
GA5 <- ga(type = "permutation", fitness = tspFitness, lower = 1, upper = ncol(D), popSize = 50, maxiter = 5000, run = 500, pmutation = 0.2)
summary(GA5)
# Reconstruct the solution found
tour <- GA5@solution[1, ]
tour <- c(tour, tour[1])
# Get length of tour.
tour_length(tour)
# get names of cities in tour.
colnames(D)[tour]
library(GA)
# Given a list of cities and the distances between each pair of cities, what is the shortest possible route that visits
# each city exactly once and returns to the origin city?
data("eurodist", package = "datasets")
D <- as.matrix(eurodist)
# Rows can be accessed as D['Stockholm', ]
# An individual round tour is represented as a permutation of a default numbering of the cities defining the current order
# in which the cities are to be visited
# Calculation of the tour length
tour_length <- function(tour)
{
N <- length(tour)
print(tour)
dist <- 0
for (i in 2:N)
dist <- dist + D[tour[i-1],tour[i]] # Add distance from previous destination to next destination to accumulator.
dist <- dist + D[tour[N],tour[1]] # Add distance back to home city.
dist
}
# The fitness function to be maximized is defined as the reciprocal of the tour length.
tspFitness <- function(tour)
{
1/tour_length(tour)
}
# Run genetic algorithm.
GA5 <- ga(type = "permutation", fitness = tspFitness, lower = 1, upper = ncol(D), popSize = 50, maxiter = 5000, run = 500, pmutation = 0.2)
summary(GA5)
# Reconstruct the solution found
tour <- GA5@solution[1, ]
tour <- c(tour, tour[1])
# Get length of tour.
tour_length(tour)
# get names of cities in tour.
colnames(D)[tour]
colnames(D)[tour]
